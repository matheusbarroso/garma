% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ConfidenceInterval.R,
%   R/ConfidenceInterval-Generic.R
\docType{class}
\name{ConfidenceInterval-class}
\alias{ConfidenceInterval-class}
\alias{ConfidenceInterval,ANY-method}
\alias{print,ConfidenceInterval-method}
\alias{summary,ConfidenceInterval-method}
\alias{plot,ConfidenceInterval-method}
\alias{coverage,ConfidenceInterval-method}
\title{\emph{GARMA} MBB simulation confidence interval class.}
\usage{
\S4method{ConfidenceInterval}{ANY}(garma.boot, ...)

\S4method{print}{ConfidenceInterval}(x)

\S4method{summary}{ConfidenceInterval}(object, ...)

\S4method{plot}{ConfidenceInterval}(x, scales = "free", type.ci = "norm")

\S4method{coverage}{ConfidenceInterval}(object)
}
\arguments{
\item{garma.boot}{An object of the \bold{GarmaSimBoot} 
class, as provided by \code{\link{GarmaSimBoot}}.}

\item{\dots}{Further arguments that specify the Confidence
Interval object,check the \bold{slots} arguments.}

\item{x}{An object of the ConfidenceInterval class, as provided
by \code{\link{ConfidenceInterval}}.}

\item{object}{An object of the ConfidenceInterval class, as provided
by \code{\link{ConfidenceInterval}}.}

\item{scales}{A character specifying if the scales should be free or not.
The default value is \code{"free"} and accepted values are:
\code{'fixed', 'free_x', 'free_y' and 'free'}.}

\item{type.ci}{A string designating the confidence interval to plot, only 
aplicable when \code{nmonte > 1}. The true value is 'norm' and the other accepted
values are: 'bias.c', 'basic' and 'perc'. Refering to the Normal, 
Bias Corrected, Basic and Percentile ci's.}

\item{x}{An object of the ConfidenceInterval class, as provided
by \code{\link{ConfidenceInterval}}.}

\item{object}{An object of the ConfidenceInterval class, as provided
by \code{\link{ConfidenceInterval}}.}
}
\description{
An S4 class to represent a \emph{garma} MBB simulation 
confidence interval object.
}
\details{
This S4 class defines the basic structre of a \emph{GARMA}
MBB simulation confidence interval object.
}
\section{Methods (by generic)}{
\itemize{
\item \code{ConfidenceInterval}: ConfidenceInterval Class constructor.

A method to create an object of the ConfidenceInterval class.

This method creates an object of the ConfidenceInterval class.

\item \code{print}: Print method for a ConfidenceInterval object.

\item \code{summary}: Summary method for a ConfidenceInterval object.

\item \code{plot}: Plot method for a ConfidenceInterval object.

\item \code{coverage}: coverage method for a ConfidenceInterval object.
}}

\section{Slots}{

\describe{
\item{\code{garma.boot}}{An object of the \bold{GarmaSimBoot}
class, as provided by \code{\link{GarmaSimBoot}}.}

\item{\code{allow.parallel}}{Logical \bold{TRUE/FALSE} indicating
whether parallel computation via the plyr (foreach) package
should be used. The default value is \code{TRUE}. OBS:paralllel
 backend must be registered prior to calling
  \code{\link{ConfidenceInterval}}.}

\item{\code{conf}}{A scalar containing the confidence level 
of the required interval(s). The default value is 0.95.}

\item{\code{summary.out}}{A data.frame with the mean 
(w.r.t. \code{nmonte}) values for all block lengths,
parameters and ci's.}

\item{\code{plot.out}}{A \code{data.frame} with the computed 
ci's for each parameter, block length and \code{nmonte}.}

\item{\code{coverage.out}}{A \code{data.frame} with the computed 
ci's coverage rates for each block length , parameter 
and type of ci (Normal, Bias Corrected, Basic, Percentile)}

\item{\code{value}}{A list, where each element is a data.frame
with the computed ci's for each parameter in each Monte 
Carlo simulation through the MBB resampling process. 
The number of elements in the list is equivalent to 
\code{l} in \code{\link{GarmaSimBoot}}.}
}}

\examples{
##Some Specs/Simulations for different boot outputs:
library(garma)
no_cores <- if(detectCores()==1) 1 else detectCores() -1
registerDoParallel(no_cores)

spec1 <- GarmaSim(
GarmaSpec("GA",
         phi = c(0.5),
         beta.x = 1,
         sigma2 = 2,
         X = as.matrix(
           data.frame(
             x1 = rep(10,101)))),
nmonte = 1, burnin = 0)

boot1 <- GarmaSimBoot(spec1,l = 20 )

spec2 <- GarmaSim(
GarmaSpec("GA",
         phi = c(0.5),
         beta.x = 1,
         sigma2 = 2,
         X = as.matrix(
           data.frame(
             x1 = rep(10,101)))),
nmonte = 10, burnin = 0)

boot2 <- GarmaSimBoot(spec2,l = c(5,15,20) )

##Example of the GarmaSimBoot methods:

ci <- ConfidenceInterval(boot1)
print(ci)
summary(ci)
coverage (ci)
plot(ci,type.ci='basic')

ci <- ConfidenceInterval(boot2)
print(ci)
summary(ci)
coverage (ci)
plot(ci,type.ci='perc')
plot(ci)  #norm ci
}
\author{
Matheus de Vasconcellos Barroso
}
