% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GarmaSim.R, R/GarmaSim-Generic.R
\docType{class}
\name{GarmaSim-class}
\alias{GarmaSim-class}
\alias{GarmaSim,ANY-method}
\alias{print,GarmaSim-method}
\alias{plot,GarmaSim-method}
\alias{summary,GarmaSim-method}
\title{\emph{GARMA} simulation class.}
\usage{
\S4method{GarmaSim}{ANY}(spec, ...)

\S4method{print}{GarmaSim}(x)

\S4method{plot}{GarmaSim}(x, confInt = 0.95, ...)

\S4method{summary}{GarmaSim}(object, ...)
}
\arguments{
\item{spec}{An object of the GarmaSpec class, as provided
by \code{\link{GarmaSpec}}.}

\item{\dots}{Further arguments that specify the simulation object.
Check the \bold{Slots} for further details.}

\item{x}{An object of the GarmaSim class, as provided
by \code{\link{GarmaSim}}.}

\item{confInt}{A numeric value, \eqn{0 < confInt <1},
giving the desired confidente interval size for the plot.}

\item{object}{An object of the GarmaSim class, as provided
by \code{\link{GarmaSim}}.}

\item{x}{An object of the GarmaSim class, as provided
by \code{\link{GarmaSim}}.}
}
\description{
An S4 class to represent a \emph{garma} simulation object.
}
\details{
This S4 class defines the basic structre of a \emph{GARMA}
simulation object.
}
\section{Methods (by generic)}{
\itemize{
\item \code{GarmaSim}: GarmaSim Class constructor.

A method to create an object of the GarmaSim class.

This method creates an object of the GarmaSim class.

\item \code{print}: Print method for a GarmaSim object.

\item \code{plot}: Print method for a GarmaSim object default plot.

\item \code{summary}: Summary method for a GarmaSim object default plot.
}}

\section{Slots}{

\describe{
\item{\code{spec}}{An object of the \bold{GarmaSpec} class, as provided
by \code{\link{GarmaSpec}}.}

\item{\code{nmonte}}{A positive integer, specifying the number of Monte Carlo
simulations to perform, the default value is \bold{1000}.}

\item{\code{nsteps}}{A numeric vector with the number of steps in the
Garma model simulation, that is, the length of the time series
to simulate. The default value is \bold{100}.}

\item{\code{burnin}}{A numeric vector indicating the number of burn in
observations. If you want to generate only \code{nsteps} this
argument should be set equal to zero. Otherwise, provide a positive
integer. The default value is \bold{1000}.}

\item{\code{allow.parallel}}{Logical \bold{TRUE/FALSE} indicating
whether parallel computation via the foreach package
should be used. The default value is \code{TRUE}. OBS:paralllel
 backend must be registered prior to calling \code{\link{GarmaSim}}.}

\item{\code{seed}}{Numeric, the seed to \code{set.seed()} for
replicable examples. Default value is \bold{123}.}
}}

\examples{
##Some Specs/Simulations for different outputs:

\dontrun{
#Incompatible dimensions x and beta.x:
ex1 <- GarmaSim(
GarmaSpec("GA", 
phi = c(0.2),
theta = c(1,2,3),
mu0 = 1:3,
X = as.matrix(
data.frame(
intercept = rep(4,1100),
x1 = rep(3,1100)))),
nmonte = 2)

#Incompatible number of rows
ex2 <- GarmaSim(
GarmaSpec("GA", 
phi = c(0.2),
theta = c(1,2,3),
mu0 = 1:3,
beta.x = c(1,2),
X = as.matrix(
data.frame(
intercept = rep(4,1100),
x1 = rep(3,1100)))),
nmonte = 2)
}

ex3 <- GarmaSim(
GarmaSpec("PO",
beta.x = c(0.1,1),
X = as.matrix(
data.frame(
intercept = rep(10,1100),
x1 = c(rep(7,100),rep(2,1000))))),
nmonte = 1, allow.parallel = TRUE) 

ex4 <- GarmaSim(
GarmaSpec("PO", 
phi = c(0.2),
theta = c(1,2,3),
mu0 = 1:3),
nmonte = 2)

ex5 <- GarmaSim(
GarmaSpec("PO", 
mu0 = 10,
phi = 0.15, 
X = as.matrix(
data.frame(
 x1 = rep(10,101)))),
burnin = 0,
nmonte = 10)

ex6 <- GarmaSim(
GarmaSpec("GA", 
phi = c(0.2),
theta = c(1,2,3),
mu0 = 1:3,
beta.x = c(1,1),
X = as.matrix(
data.frame(
intercept = rep(4,1103),
 x1 = rep(3,1103)))),
nmonte = 2)

ex7 <- GarmaSim(
GarmaSpec("GA", 
phi = c(0.2),
theta = c(1,2,3),
mu0 = 1:3,
beta.x = c(1,2),
X = as.matrix(
data.frame(
intercept = rep(4,1103),
x1  =rep(3,1103)))),
nmonte = 10)

ex8 <- GarmaSim(
GarmaSpec("PO", 
phi = c(0.5, 0.15),
mu0 = c(1000, 1100),
beta.x = c(1, 1),
X = as.matrix(
data.frame(
intercept = rep(1, 1102),
x1 = c(rep(7, 100),
rep(2,1002))))),
nmonte = 10))

ex9 <- GarmaSim(
GarmaSpec("GA"), 
nmonte = 10)

ex10 <- GarmaSim(
GarmaSpec("PO"), 
nmonte = 10)



##Example of the GarmaSim methods:

print(ex1)
plot(ex1)
summary(ex1)
}
\author{
Matheus de Vasconcellos Barroso
}
